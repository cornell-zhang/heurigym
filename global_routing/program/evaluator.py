import subprocess
import os
import sys


def evaluate(cap_file: str, net_file: str, solution_file: str) -> float:
    """
    Cost calculation function: calculates the cost.
    Suppose the input has been verified by the verifier, which means the input to this function is always valid.
    Please do NOT change the function name and arguments.
    It is used by the agent to evaluate the cost of the generated solution.

    Args:
        cap_file: Path to the routing resource file
        net_file: Path to the net information file
        solution_file: Path to the output file generated by the solver

    Returns:
        float: The final cost
    """
    # Get the directory of this script
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Make sure all paths are absolute
    cap_file = os.path.abspath(cap_file)
    net_file = os.path.abspath(net_file)
    solution_file = os.path.abspath(solution_file)
    
    # Check if files exist
    for file_path, name in [(cap_file, "cap_file"), (net_file, "net_file"), (solution_file, "solution_file")]:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"{name} does not exist: {file_path}")
        if not os.path.isfile(file_path):
            raise ValueError(f"{name} is not a file: {file_path}")
    
    # if solution file is empty, return 0
    if os.path.getsize(solution_file) == 0:
        raise ValueError("Solution file is empty")
    
    # Compile the C++ evaluator
    try:
        subprocess.run(["make"], cwd=script_dir, check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error compiling evaluator: {e}", file=sys.stderr)
        raise

    # Run the compiled evaluator with the input files
    result = subprocess.run(
        ["./evaluator", cap_file, net_file, solution_file],
        cwd=script_dir,
        capture_output=True,
        text=True,
        check=False,  # Don't treat non-zero exit status as error
    )
    
    # Parse the output to get the total cost from the last line
    output_lines = result.stdout.strip().split("\n")
    if not output_lines:
        raise ValueError("Evaluator produced no output")
    
    last_line = output_lines[-1]
    if not last_line.startswith("total cost"):
        raise ValueError(f"Unexpected output format. Last line: {last_line}")
    
    cost = float(last_line.split()[-1])
    return cost


if __name__ == "__main__":
    import sys
    import argparse

    parser = argparse.ArgumentParser(description="Evaluate global routing solution")
    parser.add_argument("cap_file", help="Path to the routing resource file")
    parser.add_argument("net_file", help="Path to the net information file")
    parser.add_argument("solution_file", help="Path to the solution file")

    args = parser.parse_args()

    cost = evaluate(args.cap_file, args.net_file, args.solution_file)
    print(f"Total cost: {cost}")
    sys.exit(0)
